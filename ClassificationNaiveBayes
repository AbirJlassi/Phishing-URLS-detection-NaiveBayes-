{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "64f8621f",
      "metadata": {
        "id": "64f8621f"
      },
      "source": [
        "## Importation des bibliothèques"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f64f097b",
      "metadata": {
        "id": "f64f097b"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import re\n",
        "import ipaddress\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "from sklearn.model_selection import train_test_split\n",
        "from urllib.parse import urlparse\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "39768754",
      "metadata": {
        "id": "39768754"
      },
      "source": [
        "**Explication :** Importation des bibliothèques nécessaires pour le projet."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6d42b032",
      "metadata": {
        "id": "6d42b032"
      },
      "source": [
        "## Chargement des données"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c35ea7b0",
      "metadata": {
        "id": "c35ea7b0"
      },
      "outputs": [],
      "source": [
        "df=pd.read_csv(\"malicious_phish.csv\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2bea6bb6",
      "metadata": {
        "id": "2bea6bb6"
      },
      "source": [
        "**Explication :** Chargement et visualisation des données initiales."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8334a9a6",
      "metadata": {
        "id": "8334a9a6"
      },
      "source": [
        "## Séparation des caractéristiques et des étiquettes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6ae0f1e7",
      "metadata": {
        "id": "6ae0f1e7"
      },
      "outputs": [],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "099892f1",
      "metadata": {
        "id": "099892f1"
      },
      "source": [
        "**Explication :** Préparation des données pour l'entraînement du modèle."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7942f4ed",
      "metadata": {
        "id": "7942f4ed"
      },
      "source": [
        "## Division des données"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "777d9f26",
      "metadata": {
        "id": "777d9f26"
      },
      "outputs": [],
      "source": [
        "df.columns"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f0719c2a",
      "metadata": {
        "id": "f0719c2a"
      },
      "source": [
        "**Explication :** Division des données en ensembles d'entraînement et de test."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fd3260db",
      "metadata": {
        "id": "fd3260db"
      },
      "source": [
        "## Entraînement du modèle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "572bbeda",
      "metadata": {
        "id": "572bbeda"
      },
      "outputs": [],
      "source": [
        "df['type'].unique()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fbfb3c8e",
      "metadata": {
        "id": "fbfb3c8e"
      },
      "source": [
        "**Explication :** Entraînement du modèle Naive Bayes sur l'ensemble d'entraînement."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "08f13e4b",
      "metadata": {
        "id": "08f13e4b"
      },
      "source": [
        "## Évaluation du modèle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a39b898a",
      "metadata": {
        "id": "a39b898a"
      },
      "outputs": [],
      "source": [
        "nan_count = df['type'].isna().sum()\n",
        "nan_count"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5fd3dd1b",
      "metadata": {
        "id": "5fd3dd1b"
      },
      "source": [
        "**Explication :** Évaluation des performances du modèle sur l'ensemble de test."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1b013b8d",
      "metadata": {
        "id": "1b013b8d"
      },
      "source": [
        "## Prédictions sur des exemples d'URLs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0a2220ff",
      "metadata": {
        "id": "0a2220ff"
      },
      "outputs": [],
      "source": [
        "df = df.dropna(subset=['type'])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "980302b7",
      "metadata": {
        "id": "980302b7"
      },
      "source": [
        "**Explication :** Utilisation du modèle pour prédire sur de nouvelles données."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "91f7c342",
      "metadata": {
        "id": "91f7c342"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9890a5c5",
      "metadata": {
        "id": "9890a5c5"
      },
      "outputs": [],
      "source": [
        "# Create 'label' column based on the condition\n",
        "df['type'] = df['type'].apply(lambda x: 0 if x == 'benign' else 1)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fe8589d6",
      "metadata": {
        "id": "fe8589d6"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a78238bc",
      "metadata": {
        "id": "a78238bc"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6fe725ff",
      "metadata": {
        "id": "6fe725ff"
      },
      "outputs": [],
      "source": [
        "\n",
        "\n",
        "# Function to extract domain from URL\n",
        "def getDomain(url):\n",
        "    domain = urlparse(url).netloc\n",
        "    if re.match(r\"^www\\.\", domain):\n",
        "        domain = domain.replace(\"www.\", \"\")\n",
        "    return domain\n",
        "\n",
        "# Check if URL contains an IP address\n",
        "def havingIP(url):\n",
        "    try:\n",
        "        ipaddress.ip_address(url)\n",
        "        return 1\n",
        "    except:\n",
        "        return 0\n",
        "\n",
        "# Check for \"@\" symbol in URL\n",
        "def haveAtSign(url):\n",
        "    return 1 if \"@\" in url else 0\n",
        "\n",
        "# Get URL length\n",
        "def getLength(url):\n",
        "    return len(url)\n",
        "\n",
        "# Get URL depth (number of '/' in path)\n",
        "def getDepth(url):\n",
        "    path = urlparse(url).path\n",
        "    return path.count('/')\n",
        "\n",
        "# Check if URL uses HTTPS\n",
        "def useOfHTTPS(url):\n",
        "    return 1 if urlparse(url).scheme == 'https' else 0\n",
        "\n",
        "# Check if URL is shortened\n",
        "def isShortened(url):\n",
        "    shorteners = [\"bit.ly\", \"goo.gl\", \"tinyurl\", \"ow.ly\", \"is.gd\", \"t.co\"]\n",
        "    domain = getDomain(url)\n",
        "    return 1 if domain in shorteners else 0\n",
        "\n",
        "# Count subdomains\n",
        "def countSubdomains(url):\n",
        "    domain = getDomain(url)\n",
        "    return domain.count('.')\n",
        "\n",
        "# Check for suspicious characters like '-' and '_'\n",
        "def containsSuspiciousCharacters(url):\n",
        "    return 1 if \"-\" in url or \"_\" in url else 0\n",
        "\n",
        "# Length of the domain name\n",
        "def domainLength(url):\n",
        "    domain = getDomain(url)\n",
        "    return len(domain)\n",
        "\n",
        "# Count digits in the URL\n",
        "def digitCount(url):\n",
        "    return sum(c.isdigit() for c in url)\n",
        "\n",
        "# Check if URL contains sensitive words\n",
        "def containsSensitiveWords(url):\n",
        "    sensitive_words = [\"login\", \"secure\", \"account\", \"update\", \"bank\", \"verify\"]\n",
        "    return 1 if any(word in url for word in sensitive_words) else 0\n",
        "\n",
        "# Check if URL contains encoded characters\n",
        "def usesURLEncoding(url):\n",
        "    return 1 if '%' in url else 0\n",
        "\n",
        "# Check if the TLD is suspicious\n",
        "def isSuspiciousTLD(url):\n",
        "    suspicious_tlds = [\"xyz\", \"top\", \"club\", \"online\", \"info\"]\n",
        "    tld = getTopLevelDomain(url)\n",
        "    return 1 if tld in suspicious_tlds else 0\n",
        "\n",
        "# Get top-level domain (TLD) from URL\n",
        "def getTopLevelDomain(url):\n",
        "    domain = getDomain(url)\n",
        "    return domain.split('.')[-1]\n",
        "\n",
        "# Check if \"https\" is in the domain name\n",
        "def httpsInDomain(url):\n",
        "    domain = getDomain(url)\n",
        "    return 1 if 'https' in domain else 0\n",
        "\n",
        "# Check if URL has a redirect \"//\" in the path\n",
        "def hasRedirect(url):\n",
        "    return 1 if \"//\" in urlparse(url).path else 0\n",
        "\n",
        "# Get URL path length\n",
        "def getPathLength(url):\n",
        "    path = urlparse(url).path\n",
        "    return len(path)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1cc5236b",
      "metadata": {
        "id": "1cc5236b"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2905b656",
      "metadata": {
        "id": "2905b656"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "56c7ce3a",
      "metadata": {
        "id": "56c7ce3a"
      },
      "outputs": [],
      "source": [
        "def featureExtraction(url, label):\n",
        "    features = []\n",
        "    # Address bar-based features\n",
        "    features.append(getDomain(url))                  # Domain name\n",
        "    features.append(havingIP(url))                   # IP in URL\n",
        "    features.append(haveAtSign(url))                 # '@' symbol\n",
        "    features.append(getLength(url))                  # URL length\n",
        "    features.append(getDepth(url))                   # Depth of URL\n",
        "    features.append(useOfHTTPS(url))                 # HTTPS protocol\n",
        "    features.append(isShortened(url))                # URL shortener check\n",
        "    features.append(countSubdomains(url))            # Subdomain count\n",
        "    features.append(containsSuspiciousCharacters(url))  # Suspicious characters in URL\n",
        "    features.append(domainLength(url))               # Domain length\n",
        "    features.append(digitCount(url))                 # Number of digits in URL\n",
        "    features.append(containsSensitiveWords(url))     # Sensitive words in URL\n",
        "    features.append(usesURLEncoding(url))            # URL encoding presence\n",
        "    features.append(isSuspiciousTLD(url))            # Suspicious TLD\n",
        "    features.append(httpsInDomain(url))              # \"https\" in domain\n",
        "    features.append(hasRedirect(url))                # Redirection in URL\n",
        "    features.append(getPathLength(url))              # Path length\n",
        "\n",
        "    # Include the label as the last feature\n",
        "    features.append(label)\n",
        "\n",
        "    return features\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "eaaed107",
      "metadata": {
        "id": "eaaed107"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e85a11f6",
      "metadata": {
        "id": "e85a11f6"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a5ebe0dc",
      "metadata": {
        "id": "a5ebe0dc"
      },
      "outputs": [],
      "source": [
        "#Extracting the feautres & storing them in a list\n",
        "features = []\n",
        "for i in range(len(df)):\n",
        "    url = df['url'][i]\n",
        "    label = df['type'][i]\n",
        "    features.append(featureExtraction(url, label))"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d88beb07",
      "metadata": {
        "id": "d88beb07"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c593d948",
      "metadata": {
        "id": "c593d948"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ae8c6bb5",
      "metadata": {
        "id": "ae8c6bb5"
      },
      "outputs": [],
      "source": [
        "\n",
        "\n",
        "#converting the list to dataframe\n",
        "feature_names = [\n",
        "    'Domain',               # getDomain(url)\n",
        "    'Have_IP',              # havingIP(url)\n",
        "    'Have_At',              # haveAtSign(url)\n",
        "    'URL_Length',           # getLength(url)\n",
        "    'URL_Depth',            # getDepth(url)\n",
        "    'Use_of_HTTPS',         # useOfHTTPS(url)\n",
        "    'TinyURL',              # isShortened(url)\n",
        "    'Subdomain_Count',      # countSubdomains(url)\n",
        "    'Suspicious_Characters',# containsSuspiciousCharacters(url)\n",
        "    'Domain_Length',        # domainLength(url)\n",
        "    'Digit_Count',          # digitCount(url)\n",
        "    'Sensitive_Words',      # containsSensitiveWords(url)\n",
        "    'URL_Encoding',         # usesURLEncoding(url)\n",
        "    'Suspicious_TLD',       # isSuspiciousTLD(url)\n",
        "    'HTTPS_in_Domain',      # httpsInDomain(url)\n",
        "    'Redirection',          # hasRedirect(url)\n",
        "    'Path_Length',          # getPathLength(url)\n",
        "    'Label'                 # label\n",
        "]\n",
        "\n",
        "\n",
        "full_features_df = pd.DataFrame(features, columns=feature_names)\n",
        "full_features_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1bb7c2d1",
      "metadata": {
        "id": "1bb7c2d1"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "34bc7a5b",
      "metadata": {
        "id": "34bc7a5b"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "03250c07",
      "metadata": {
        "id": "03250c07"
      },
      "outputs": [],
      "source": [
        "# Storing the data in CSV file\n",
        "full_features_df.to_csv('urldata.csv', index=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "be6b211b",
      "metadata": {
        "id": "be6b211b"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2f3647b8",
      "metadata": {
        "id": "2f3647b8"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2dccbfaa",
      "metadata": {
        "id": "2dccbfaa"
      },
      "outputs": [],
      "source": [
        "# Read the CSV file\n",
        "data = pd.read_csv('urldata.csv')\n",
        "\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "da49302e",
      "metadata": {
        "id": "da49302e"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1fceb653",
      "metadata": {
        "id": "1fceb653"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fcaeb673",
      "metadata": {
        "id": "fcaeb673"
      },
      "outputs": [],
      "source": [
        "data.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a1a895b8",
      "metadata": {
        "id": "a1a895b8"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "60d2803c",
      "metadata": {
        "id": "60d2803c"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8747d728",
      "metadata": {
        "id": "8747d728"
      },
      "outputs": [],
      "source": [
        "#Dropping the Domain column\n",
        "data1 = data.drop(['Domain'], axis = 1).copy()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1eca2ea0",
      "metadata": {
        "id": "1eca2ea0"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c033ddb4",
      "metadata": {
        "id": "c033ddb4"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "12de1fd5",
      "metadata": {
        "id": "12de1fd5"
      },
      "outputs": [],
      "source": [
        "data1.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0321fd77",
      "metadata": {
        "id": "0321fd77"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c7fc7cc2",
      "metadata": {
        "id": "c7fc7cc2"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "645ff966",
      "metadata": {
        "id": "645ff966"
      },
      "outputs": [],
      "source": [
        "# shuffling the rows in the dataset so that when splitting the train and test set are equally distributed\n",
        "data1 = data1.sample(frac=1).reset_index(drop=True)\n",
        "data1.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "59b48ff4",
      "metadata": {
        "id": "59b48ff4"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "24eb4699",
      "metadata": {
        "id": "24eb4699"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8b5669ad",
      "metadata": {
        "id": "8b5669ad"
      },
      "outputs": [],
      "source": [
        "# Sepratating & assigning features and target columns to X & y\n",
        "y = data1['Label']\n",
        "X = data1.drop('Label',axis=1)\n",
        "X.shape, y.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "81ff4289",
      "metadata": {
        "id": "81ff4289"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5510d2eb",
      "metadata": {
        "id": "5510d2eb"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2d03ee9b",
      "metadata": {
        "id": "2d03ee9b"
      },
      "outputs": [],
      "source": [
        "# Splitting the dataset into train and test sets: 80-20 split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y,\n",
        "                                                    test_size = 0.2, random_state = 12)\n",
        "X_train.shape, X_test.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2a91bded",
      "metadata": {
        "id": "2a91bded"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "061babf3",
      "metadata": {
        "id": "061babf3"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f7ea5d89",
      "metadata": {
        "id": "f7ea5d89"
      },
      "outputs": [],
      "source": [
        "\n",
        "\n",
        "# Initialize the Naive Bayes classifier\n",
        "nb_model = GaussianNB()\n",
        "\n",
        "# Train the model on the training data\n",
        "nb_model.fit(X_train, y_train)\n",
        "\n",
        "# Predict on the test data\n",
        "y_pred = nb_model.predict(X_test)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "03fb39d0",
      "metadata": {
        "id": "03fb39d0"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6c17d9bf",
      "metadata": {
        "id": "6c17d9bf"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b571dec6",
      "metadata": {
        "id": "b571dec6"
      },
      "outputs": [],
      "source": [
        "# Print accuracy and classification report\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "45030fa2",
      "metadata": {
        "id": "45030fa2"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ad90abfd",
      "metadata": {
        "id": "ad90abfd"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d67d286f",
      "metadata": {
        "id": "d67d286f"
      },
      "outputs": [],
      "source": [
        "# Sample URLs for testing\n",
        "test_urls = [\n",
        "   \"https://www.facebook.com/\",\n",
        "    \"https://www.funzine.hu\" ,\n",
        "\"https://chatgpt.com/\",\n",
        "\"https://www.bulgariaski.com\"  ,\n",
        "\"https://www.aoh61.com\"  ,\n",
        "]\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "02e36b77",
      "metadata": {
        "id": "02e36b77"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3447ddf2",
      "metadata": {
        "id": "3447ddf2"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "eff0df00",
      "metadata": {
        "id": "eff0df00"
      },
      "outputs": [],
      "source": [
        "# Prepare an empty list to store features of each test URL\n",
        "test_features = []\n",
        "\n",
        "# Extract features for each URL\n",
        "for url in test_urls:\n",
        "    features = featureExtraction(url, label=0)  # Label can be any value, we only care about the features here\n",
        "    test_features.append(features[1:-1])        # Exclude the label in the test set\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "af94ea02",
      "metadata": {
        "id": "af94ea02"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "302b0743",
      "metadata": {
        "id": "302b0743"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4d0eaf29",
      "metadata": {
        "id": "4d0eaf29"
      },
      "outputs": [],
      "source": [
        "test_features"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2ecc3060",
      "metadata": {
        "id": "2ecc3060"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "18e93eaf",
      "metadata": {
        "id": "18e93eaf"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9f7b77ce",
      "metadata": {
        "id": "9f7b77ce"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Convert list of feature lists into a DataFrame\n",
        "test_df = pd.DataFrame(test_features, columns=X.columns)\n",
        "# Predict whether each URL is phishing (0) or legitimate (1)\n",
        "predictions = nb_model.predict(test_df)\n",
        "\n",
        "# Print the results\n",
        "for url, prediction in zip(test_urls, predictions):\n",
        "    result = \"Legitimate\" if prediction == 1 else \"Phishing\"\n",
        "    print(f\"URL: {url} - Prediction: {result}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c5b3b482",
      "metadata": {
        "id": "c5b3b482"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3ec36c28",
      "metadata": {
        "id": "3ec36c28"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1668cd48",
      "metadata": {
        "id": "1668cd48"
      },
      "outputs": [],
      "source": [
        "# Encode only non-numeric columns\n",
        "for col in X.columns:\n",
        "    if X[col].dtype == 'object':\n",
        "        label_encoder = LabelEncoder()\n",
        "        X[col] = label_encoder.fit_transform(X[col])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c8032cca",
      "metadata": {
        "id": "c8032cca"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "28e0e9ff",
      "metadata": {
        "id": "28e0e9ff"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "42b55a0b",
      "metadata": {
        "id": "42b55a0b"
      },
      "outputs": [],
      "source": [
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "962c0a18",
      "metadata": {
        "id": "962c0a18"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7217b945",
      "metadata": {
        "id": "7217b945"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1bc6d1db",
      "metadata": {
        "id": "1bc6d1db"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Initialize the Naive Bayes classifier\n",
        "nb_model = GaussianNB()\n",
        "\n",
        "# Train the model on the training data\n",
        "nb_model.fit(X_train, y_train)\n",
        "\n",
        "# Predict on the test data\n",
        "y_pred = nb_model.predict(X_test)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "970583e1",
      "metadata": {
        "id": "970583e1"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5743f566",
      "metadata": {
        "id": "5743f566"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "04f3bede",
      "metadata": {
        "id": "04f3bede"
      },
      "outputs": [],
      "source": [
        "# Print accuracy and classification report\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e206b53d",
      "metadata": {
        "id": "e206b53d"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "dfec3441",
      "metadata": {
        "id": "dfec3441"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1ffa39cf",
      "metadata": {
        "id": "1ffa39cf"
      },
      "outputs": [],
      "source": [
        "# Sample URLs for testing\n",
        "test_urls = [\n",
        "   \"https://www.southbankmosaics.com\",\n",
        "    \"https://www.uni-mainz.de\" ,\n",
        "\"https://www.rewildingargentina.org\",\n",
        "\"http://www.teramill.com\"  ,\n",
        "\"http://www.f0519141.xsph.ru\"  ,\n",
        "]\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "918410b2",
      "metadata": {
        "id": "918410b2"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ab7149df",
      "metadata": {
        "id": "ab7149df"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "37c33fbc",
      "metadata": {
        "id": "37c33fbc"
      },
      "outputs": [],
      "source": [
        "# Prepare an empty list to store features of each test URL\n",
        "test_features = []\n",
        "\n",
        "# Extract features for each URL\n",
        "for url in test_urls:\n",
        "    features = featureExtraction(url, label=0)  # Label can be any value, we only care about the features here\n",
        "    test_features.append(features[:-1])         # Exclude the label in the test set\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "080d04c3",
      "metadata": {
        "id": "080d04c3"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "499699ed",
      "metadata": {
        "id": "499699ed"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "66363482",
      "metadata": {
        "id": "66363482"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Convert list of feature lists into a DataFrame\n",
        "test_df = pd.DataFrame(test_features, columns=X.columns)\n",
        "# Predict whether each URL is phishing (0) or legitimate (1)\n",
        "predictions = nb_model.predict(test_df)\n",
        "\n",
        "# Print the results\n",
        "for url, prediction in zip(test_urls, predictions):\n",
        "    result = \"Legitimate\" if prediction == 1 else \"Phishing\"\n",
        "    print(f\"URL: {url} - Prediction: {result}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8b9597a7",
      "metadata": {
        "id": "8b9597a7"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7d1717b1",
      "metadata": {
        "id": "7d1717b1"
      },
      "source": [
        "## Section additionnelle"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6a81b6a2",
      "metadata": {
        "id": "6a81b6a2"
      },
      "outputs": [],
      "source": [
        "# Predict whether each URL is phishing (0) or legitimate (1)\n",
        "predictions = nb_model.predict(test_df)\n",
        "\n",
        "# Print the results\n",
        "for url, prediction in zip(test_urls, predictions):\n",
        "    result = \"Legitimate\" if prediction == 1 else \"Phishing\"\n",
        "    print(f\"URL: {url} - Prediction: {result}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3224d058",
      "metadata": {
        "id": "3224d058"
      },
      "source": [
        "**Explication :** Cette cellule n'a pas d'explication définie."
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "language_info": {
      "name": "python"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
